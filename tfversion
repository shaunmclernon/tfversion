#!/usr/bin/env bash
set -e
set +x # Set to -x for debugging

###
### This script will inspect the remote S3 tfstate to determine what 
### version of terraform was last used.
###

# Assumptions:
# - By default it will assume that the S3 backend is in state.tf
# - An option is provided to override where to local for the state conf is
# - Will use same profile from the state conf to download the remote state

__VERBOSE=0

usage() {
    __VERBOSE=1 # Override to enable log output
    log "Usage: tfversion [<options>]"
    log ""
    log "Options:"
    log "  -v, --verbose  Enable verbose mode (default 0)"
    log "  -c, --conf     Backend terraform state (default state.tf)"
    log ""
    log "Help Options:"
    log "-h, --help       Show this help message"
}


# Only send output stdout if verbose is enabled.
function log() {
    if [[ $__VERBOSE -eq 1 ]]; then
        echo "$@"
    fi
}

# Extract the value from the given conf file (either HCL or tfvars)
# for a given filter and extract using specific offset.
get_value_from_conf_file() {
    local result
    conf_file="$1"
    offset="$2"
    filter="$3"
    result=$(cat < "$conf_file" | grep "$filter" | tr -s ' ' | cut -f"$offset" -d' ' | tr -d \")
    echo "$result"
}

# Download the remote state file and extract the terraform version (cleanup tmp file afterwards)
get_terraform_version_from_state_file() {
    local state_file="s3://$1/$2"
    local tmp_state_file
    
    # We will store the state in a tmp file (and will remove it later)
    tmp_state_file=$(mktemp)

    log "AWS profile: $3"
    log "Remote S3 bucket: $1"
    log "State file key: $2"
    log ""
    log "Downloading state file from: $state_file"
    log "To temporary file: $tmp_state_file"

    aws s3 cp "$state_file" "$tmp_state_file" --profile "$3" > /dev/null
    TF_VERSION=$(jq -r ".terraform_version" "$tmp_state_file")

    rm "$tmp_state_file" || true
    log "Cleaning up..."
}

display_terraform_version() {
    log ""
    log "This repo last used terraform;"
    echo "$TF_VERSION"
}

#### SCRIPT STARTS HERE ###

log ""
log "tfversion will inspect the remote S3 terraform state to determine what version of terraform was last used."
log ""
log "It is recommended to use terraform version pinning whenever possible."
log "See https://www.terraform.io/docs/language/settings/index.html#specifying-a-required-terraform-version"
log ""

while [ "$1" != "" ]; do
    case $1 in
        -v | --verbose ) shift
            __VERBOSE=$1
            ;;
        -c | --conf ) shift
            STATE_CONF=$1
            ;;
        -h | --help )
            usage
            exit
            ;;
    esac
    shift
done

if [ ! -f "$STATE_CONF" ]; then
    echo "Error: Terraform state config file not found!"
    echo " - check the filename is correct: $STATE_CONF"
    echo " - check you are in the expected terraform repo"
    exit 1
fi

# If the state config is not in 'state.tf' then we will assume
# that the repo was [initialised](https://www.terraform.io/docs/cli/commands/init.html#backend-initialization) using a partial backend configuration 
# instead being passed as backend-config.tfvars, we need to know
# as the state.tf uses HCL (and we use an offset of 4 to extract values)
# whereas a tfvars file is a key=value file (and we use an offset of 3)
# ie. terraform.dev.backend-config.tfvars
if [ "$STATE_CONF" == "state.tf" ]; then
    export OFFSET=4
else
    export OFFSET=3
fi

# If the AWS profile has been set to "var.profile" then we can assume
# that the wrong backend conf file is being used.
# NOTE: This only works with our naming convention. So YMMV
STATE_AWS_PROFILE=$(get_value_from_conf_file "$STATE_CONF" "$OFFSET" "profile")
if [ "$STATE_AWS_PROFILE" == "var.profile" ]; then
    echo "Error: AWS profile not found!"
    echo " - check the correct backend terraform conf is being used!"
    exit 1
fi

S3_BUCKET=$(get_value_from_conf_file "$STATE_CONF" "$OFFSET" "bucket")
S3_KEY=$(get_value_from_conf_file "$STATE_CONF" "$OFFSET" "key")
get_terraform_version_from_state_file "$S3_BUCKET" "$S3_KEY" "$STATE_AWS_PROFILE"
display_terraform_version
